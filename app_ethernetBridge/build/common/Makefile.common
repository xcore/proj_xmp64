###########################################
# XMOS COMMON MAKEFILE
#
# Include this makefile *after* defining the following variables
#
# BASE_DIR = home directory of project (i.e. where the bin/ and src/ directories are)
#
# TARGET = target board/device 
#
# BINARIES = lists of binaries that may be built
#
# SOURCE_DIRS = directories under the src/ directory containing source to compiler 
# INCLUDE_DIRS = directories under the src/ direcotry containing header files
#
# LIB_DIRS = directories under the src directory containing libraries
#
# SOURCE_FILES_[binary] = source files specific to a particular binary
#
# EXCLUDE_FILES = list of files to exclude from the build (just the file names - no path needed)
#
# XCC_FLAGS = flags for xcc
#
# XCC_FLAGS_[source_file] = flags for a specific source file (will
#                           overide XCC_FLAGS)
#
##########################################

# Define some generic OS functions
ifeq ($(OS),WINDOWS)
WINFLAG=1
else
ifeq ($(findstring Windows, $(OS)),Windows)
WINFLAG=1
else
WINFLAG=0
endif
endif

ifeq ($(WINFLAG),1)
CP=copy $(subst /,\,$(1))
RM=del $(subst /,\,$(1))
MKDIR=mkdir $(subst /,\,$(1))
NULL=nul
CAT=type
OS=WINDOWS
SHELL=C:\Windows\system32\cmd.exe
else
CP=cp $(1)
RM=rm -f $(1)
MKDIR=mkdir -p $(1)
NULL=/dev/null
CAT=cat
OS=UNIX
endif

# General utility function

TO_OBJ = $(patsubst %.S,%.o,$(patsubst %.xc,%.o, $(patsubst %.c,%.o, $(patsubst %.s,%.o, $(1)))))

# Work out the directories and file lists
TARGET_DIR = ./$(TARGET)
BIN_DIR=$(BASE_DIR)/bin/$(TARGET)

FULL_INCLUDE_DIRS = $(foreach x, $(INCLUDE_DIRS),"../$(BASE_DIR)/src/$x")
FULL_SOURCE_DIRS := $(foreach x, $(SOURCE_DIRS), $(BASE_DIR)/src/$x)
FULL_LIB_DIRS := $(foreach x, $(LIB_DIRS), $(BASE_DIR)/src/$x)

#SOURCE_DIRS := $(foreach x, $(SOURCE_DIRS), $(BASE_DIR)/src/$x)

ALL_BIN_SOURCE_FILES = $(foreach x, $(BINARIES), $(SOURCE_FILES_$x))

C_SOURCE_FILES = $(foreach x, $(FULL_SOURCE_DIRS), $(wildcard $x/*.c))
C_OBJ_FILES = $(patsubst %.c, %.o, $(C_SOURCE_FILES))
C_DEP_FILES = $(patsubst %.c, $(TARGET_DIR)/%.d, $(notdir $(C_SOURCE_FILES)))

XC_SOURCE_FILES = $(foreach x, $(FULL_SOURCE_DIRS), $(wildcard $x/*.xc))
XC_OBJ_FILES = $(patsubst %.xc, %.o, $(XC_SOURCE_FILES))
XC_DEP_FILES = $(patsubst %.xc, $(TARGET_DIR)/%.d, $(notdir $(XC_SOURCE_FILES)))

ASM_SOURCE_FILES = $(foreach x, $(FULL_SOURCE_DIRS), $(wildcard $x/*.s)) $(foreach x, $(FULL_SOURCE_DIRS), $(wildcard $x/*.S))
ASM_OBJ_FILES = $(patsubst %.S, %.o, $(patsubst %.s, %.o, $(ASM_SOURCE_FILES)))

OBJ_SOURCE_FILES = $(foreach x, $(FULL_SOURCE_DIRS), $(wildcard $x/*.o))

XN_SOURCE_FILES0 = $(foreach x, $(FULL_SOURCE_DIRS), $(wildcard $x/*.xn))
XN_SOURCE_FILES = $(filter %$(TARGET).xn, $(XN_SOURCE_FILES0))


SOURCE_FILES = $(C_SOURCE_FILES) $(XC_SOURCE_FILES) $(ASM_SOURCE_FILES)

EXCLUDE_FILES_1 = $(EXCLUDE_FILES) $(ALL_BIN_SOURCE_FILES)

EXCLUDE_DEP_FILES = $(patsubst %.xc,$(TARGET_DIR)/%.d, $(patsubst %.c,$(TARGET_DIR)/%.d, $(EXCLUDE_FILES_1)))

EXCLUDE_OBJ_FILES = $(call TO_OBJ, $(EXCLUDE_FILES_1))

OBJ_FILES0 = $(filter-out $(EXCLUDE_OBJ_FILES), $(notdir $(C_OBJ_FILES) $(XC_OBJ_FILES) $(ASM_OBJ_FILES) $(OBJ_SOURCE_FILES)))
OBJ_FILES = $(foreach x, $(OBJ_FILES0), $(TARGET_DIR)/$x)

DEP_FILES_0 = $(filter-out $(EXCLUDE_DEP_FILES),$(C_DEP_FILES) $(XC_DEP_FILES))
DEP_FILES = $(patsubst %.d, %.0.d, $(DEP_FILES_0))

HEADER_FILES = $(foreach x, $(FULL_INCLUDE_DIRS), $(wildcard $x/*.h))

INCLUDE_FLAGS = $(foreach x,$(FULL_INCLUDE_DIRS),-I$x)

VPATH = $(FULL_SOURCE_DIRS)

LIB_FILES = $(foreach x, $(FULL_LIB_DIRS), $(wildcard $x/xs1b/*.a))

LIB_FLAGS = $(foreach x,$(FULL_LIB_DIRS), -L ../$x) $(foreach x,$(LIB_FILES),-l$(patsubst lib%.a,%,$(notdir $x)))

# Make rules for directories

$(TARGET_DIR)/ :
	@-$(call MKDIR, $(TARGET_DIR)) > $(NULL)

$(BIN_DIR)/:
	@-$(call MKDIR,$(BIN_DIR)) > $(NULL)

$(BASE_DIR)/bin/: 
	@-$(call MKDIR,$(BASE_DIR)/bin) > $(NULL)

# Make rules for source


# Make rules for objects
XCC = xcc
XOBJDUMP = xobjdump

ifeq (,$(XN_SOURCE_FILES))
XCC_FLAGS += -target=$(TARGET)
endif

define make_flags
$(if $(XCC_FLAGS_$(notdir $1)), $(XCC_FLAGS_$(notdir $1)), $(XCC_FLAGS))
endef

$(TARGET_DIR)/%.o : %.xc $(XN_SOURCE_FILES) | $(TARGET_DIR)
	cd $(TARGET_DIR) && $(XCC) -c $(INCLUDE_FLAGS) $(call make_flags,$<) ../$< $(addprefix ../, $(XN_SOURCE_FILES)) -o ../$@

$(TARGET_DIR)/%.o :  %.c $(XN_SOURCE_FILES) | $(TARGET_DIR)
	cd $(TARGET_DIR) && $(XCC) -c $(INCLUDE_FLAGS) $(call make_flags,$<) ../$< $(addprefix ../, $(XN_SOURCE_FILES)) -o ../$@

$(TARGET_DIR)/%.o :  %.S $(XN_SOURCE_FILES) | $(TARGET_DIR)
	cd $(TARGET_DIR) && $(XCC) -c $(INCLUDE_FLAGS) $(call make_flags,$<) ../$< $(addprefix ../, $(XN_SOURCE_FILES)) -o ../$@

$(TARGET_DIR)/%.o : %.s $(XN_SOURCE_FILES) | $(TARGET_DIR)
	cd $(TARGET_DIR) && $(XCC) -c $(INCLUDE_FLAGS) $(call make_flags,$<) ../$< $(addprefix ../, $(XN_SOURCE_FILES)) -o ../$@

$(BIN_DIR)/%.xe :  $(OBJ_FILES) $(XN_SOURCE_FILES)  |$(BIN_DIR)/ 
	cd $(TARGET_DIR) && $(XCC) $(XCC_FLAGS) $(LIB_FLAGS) $(addprefix ../, $(OBJ_FILES)) $(addprefix ../, $(XN_SOURCE_FILES))  -o ../$@



define binary_template
$$(BIN_DIR)/$(1) :  $$(OBJ_FILES) $$(XN_SOURCE_FILES) $$(addprefix $$(TARGET_DIR)/, $$(call TO_OBJ, $$(SOURCE_FILES_$(1)))) |$$(BIN_DIR)/ 
	cd $$(TARGET_DIR) && $$(XCC) $$(XCC_FLAGS) $$(LIB_FLAGS) $$(addprefix ../, $$(OBJ_FILES)) $$(addprefix ../, $$(XN_SOURCE_FILES)) $$(call TO_OBJ, $$(SOURCE_FILES_$(1))) -o ../$$@
endef

$(eval $(foreach bin, $(BINARIES),$(eval $(call binary_template,$(bin)))))




# Dependency generation
$(TARGET_DIR)/%.d : %.xc | $(TARGET_DIR)/
	@echo Creating dependencies for $(notdir $<)
	@cd $(TARGET_DIR) && $(XCC) -MMD -E $(XCC_FLAGS) $(INCLUDE_FLAGS) ../$< > $(NULL)

$(TARGET_DIR)/%.d : %.c | $(TARGET_DIR)/
	@echo Creating dependencies for $(notdir $<)
	@cd $(TARGET_DIR) && $(XCC) -x xc -MMD -E $(XCC_FLAGS) $(INCLUDE_FLAGS) "$(realpath $<)" > $(NULL)


ifeq ($(WINFLAG),1)

$(TARGET_DIR)/process_dep.bat: | $(TARGET_DIR)/
	@echo @echo off > $@
	@echo echo #Dependency file ^> %%1.0.d >> $@
	@echo for /F "tokens=1 delims=[" %%%%a in (%%1.d) Do ( >> $@
	@echo set Var=%%%%a>> $@
	@echo set Var0=!Var:\=!!>> $@
	@echo set Var1=!Var0:%%1.o:=$(TARGET_DIR)/%%1.o $(TARGET_DIR)/%%1.d:!>> $@
	@echo set Var2=!Var1:$(realpath $(BASE_DIR)/src)=$(BASE_DIR)/src!>> $@
	@echo set Var3=!Var2:../$(BASE_DIR)/src=$(BASE_DIR)/src!>> $@
	@echo for /F "delims=" %%%%b in ('echo !Var3!') do ^<nul^>^>%%1.0.d set /p =%%%%b>> $@
	@echo ) >> $@
	@echo EXIT 0 >> $@

$(TARGET_DIR)/%.0.d: $(TARGET_DIR)/%.d $(TARGET_DIR)/process_dep.bat |$(TARGET_DIR)	
	@cd $(TARGET) && cmd /V:ON /C process_dep.bat $* 

-include $(DEP_FILES)

.PRECIOUS: $(DEP_FILES_0)
.SECONDARY: $(DEP_FILES_0)

else

 -include $(DEP_FILES_0)

 $(foreach obj,$(OBJ_FILES),$(eval DEP_FILE_$(obj) = $(subst \,,$(shell $(CAT) $(patsubst %.o,%.d,$(obj)) 2> $(NULL) ))))

$(foreach obj,$(OBJ_FILES),$(eval $(patsubst ../$(BASE_DIR)/%,$(BASE_DIR)/%,$(patsubst %.o:,$(TARGET_DIR)/%.o $(obj:.o=.d):,$(DEP_FILE_$(obj))))))

endif

.PRECIOUS: $(OBJ_FILES)
.SECONDARY: $(OBJ_FILES)

# Top level rules

clean_common:
	-$(call RM, $(BIN_DIR)/*)
	-$(call RM, $(TARGET_DIR)/*)

partial_clean:
	-$(call RM, $(TARGET_DIR)/*)
